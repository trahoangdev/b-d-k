// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  firstName String?
  lastName  String?
  password  String
  avatar    String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  files     File[]
  folders   Folder[]
  analytics Analytics[]
  shares    Share[]

  @@map("users")
}

model Folder {
  id          String   @id @default(cuid())
  name        String
  path        String   @unique
  description String?
  parentId    String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Folder[] @relation("FolderHierarchy")
  files       File[]

  @@map("folders")
}

model File {
  id          String   @id @default(cuid())
  name        String
  originalName String
  path        String   @unique
  size        BigInt
  mimeType    String
  extension   String
  hash        String   @unique
  description String?
  tags        String[]
  isPublic    Boolean  @default(false)
  folderId    String?
  userId      String
  uploadedAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder      Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)
  analytics   Analytics[]
  shares      Share[]

  @@map("files")
}

model Analytics {
  id        String      @id @default(cuid())
  type      AnalyticsType
  action    String
  details   Json?
  userId    String?
  fileId    String?
  createdAt DateTime    @default(now())

  // Relations
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  file      File?       @relation(fields: [fileId], references: [id], onDelete: SetNull)

  @@map("analytics")
}

model Share {
  id          String    @id @default(cuid())
  token       String    @unique
  fileId      String
  userId      String
  expiresAt   DateTime?
  password    String?
  maxDownloads Int?
  downloadCount Int     @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  // Relations
  file        File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("shares")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

enum UserRole {
  ADMIN
  USER
  MODERATOR
}

enum AnalyticsType {
  FILE_UPLOAD
  FILE_DOWNLOAD
  FILE_DELETE
  FILE_SHARE
  USER_LOGIN
  USER_LOGOUT
  FOLDER_CREATE
  FOLDER_DELETE
  SYSTEM_EVENT
}
